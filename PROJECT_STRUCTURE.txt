blockchain-data/
│
├── src/                                    # 源代码目录
│   ├── __init__.py
│   ├── main.py                             # 主程序入口和 CLI
│   │
│   ├── api_clients/                        # API 客户端模块
│   │   ├── __init__.py
│   │   ├── base_client.py                  # 基础客户端（速率限制、重试）
│   │   ├── dexscreener_client.py           # DexScreener API
│   │   └── geckoterminal_client.py         # GeckoTerminal API
│   │
│   ├── collectors/                         # 数据收集器模块
│   │   ├── __init__.py
│   │   ├── base_collector.py               # 收集器抽象基类
│   │   └── dex_collector.py                # DEX 数据收集器
│   │
│   ├── analyzers/                          # 数据分析模块
│   │   ├── __init__.py
│   │   └── market_analyzer.py              # 市场分析器
│   │
│   ├── filters/                            # 数据过滤模块
│   │   ├── __init__.py
│   │   └── market_cap_filter.py            # 市值和交易量过滤器
│   │
│   ├── storage/                            # 数据存储模块
│   │   ├── __init__.py
│   │   ├── models.py                       # SQLAlchemy 数据模型
│   │   └── db_manager.py                   # 数据库管理器
│   │
│   ├── utils/                              # 工具函数模块
│   │   ├── __init__.py
│   │   ├── config.py                       # 配置管理
│   │   ├── logger.py                       # 日志系统
│   │   └── helpers.py                      # 辅助函数
│   │
│   └── scheduler/                          # 任务调度模块（预留）
│       └── __init__.py
│
├── config/                                 # 配置文件目录
│
├── data/                                   # 数据目录
│   ├── cache/                              # 缓存数据
│   └── exports/                            # 导出数据
│
├── tests/                                  # 测试目录
│   └── __init__.py
│
├── scripts/                                # 脚本目录
│   └── quickstart.sh                       # 快速启动脚本
│
├── .env.example                            # 环境变量示例
├── .env                                    # 环境变量配置
├── .gitignore                              # Git 忽略文件
│
├── requirements.txt                        # Python 依赖
│
├── README.md                               # 使用文档
├── DEVELOPMENT_GUIDE.md                    # 开发指南
├── PROJECT_SUMMARY.md                      # 项目总结
└── PROJECT_STRUCTURE.txt                   # 项目结构（本文件）

核心功能模块说明：
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1. API 客户端层 (api_clients/)
   - 负责与外部 API 通信
   - 实现速率限制和错误处理
   - 支持异步请求

2. 数据收集层 (collectors/)
   - 协调多个数据源
   - 数据去重和合并
   - 批量保存到数据库

3. 数据存储层 (storage/)
   - 数据库模型定义
   - 异步数据库操作
   - 支持 SQLite/PostgreSQL

4. 数据分析层 (analyzers/)
   - 市场统计分析
   - 排名和评分
   - 报告生成

5. 数据过滤层 (filters/)
   - 市值筛选
   - 交易量筛选
   - 组合过滤

6. 工具层 (utils/)
   - 配置管理
   - 日志系统
   - 辅助函数

7. 应用层 (main.py)
   - CLI 命令行界面
   - 业务流程编排
   - 用户交互

CLI 命令：
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

python -m src.main collect      # 收集代币数据
python -m src.main query        # 查询代币
python -m src.main analyze      # 市场分析
python -m src.main health       # 健康检查
python -m src.main init-db      # 初始化数据库

数据流向：
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

外部 API → API Client → Collector → Filter → Database
                ↓           ↓          ↓         ↓
            速率限制    数据合并    筛选过滤   持久化
                                              ↓
                                         Analyzer → CLI
                                         统计分析   展示
